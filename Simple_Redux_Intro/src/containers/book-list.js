import React, { Component } from 'react';
//react-redux is used to connect react components to redux
import { connect } from 'react-redux';
//import function from actions
import { selectBook } from '../actions/index';
//bindActionCreators is used to make sure the actions generated by an action creator are passed to all of the reducers
import { bindActionCreators } from 'redux';

class BookList extends Component {
  renderList () {
    return this.props.books.map(book => {
      return (
        <li 
        key={book.title} 
        onClick={() => this.props.selectBook(book)}
        className="list-group-item">{book.title}
        </li>
      )
    })
  }
  
  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    )
  }
}

//the obj retuned will be available to the component as state.props
//if the state ever changes, the container will instantly rerender with the new list of books.
//'state' refers to the global state created in index.js
function mapStateToProps(state){
  //whatever is returns from here will show up as props inside of BookList
  return {
    books: state.books
  };
}
//anything returned from this function will end up as props on the BookList container,
//so for example, we will be able to call this.props.selectBook which will call our action creator
function mapDispatchToProps(dispatch){
  //whenever select book is called, the result should be passed to all of our reducers
  //the result is passed through dispatch which will pass on the action to all of the dif. reducers
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}


//Promote BookList from a component to a container -> it needs to know about the new dispatch method, selectBook. Make it available as props

export default connect(mapStateToProps, mapDispatchToProps)(BookList);

